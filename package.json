{
  "name": "fantasysports",
  "description": "A wrapper for the Yahoo Fantasy API for Express.js.",
  "version": "0.3.2",
  "homepage": "https://github.com/jcreamer898/fantasy-sports",
  "author": {
    "name": "Jonathan Creamer",
    "email": "matrixhasyou2k4@gmail.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/jcreamer898/fantasy-sports.git"
  },
  "bugs": {
    "url": "https://github.com/jcreamer898/fantasy-sports/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/jcreamer898/fantasy-sports/blob/master/LICENSE-MIT"
    }
  ],
  "main": "lib/index",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "grunt"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "~0.6.4",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt-contrib-watch": "~0.5.3",
    "grunt": "~0.4.5",
    "grunt-mocha-test": "^0.11.0",
    "expect.js": "^0.3.1",
    "sinon": "^1.10.3"
  },
  "keywords": [],
  "dependencies": {
    "nodealytics": "0.0.6",
    "oauth": "git://github.com/jcreamer898/node-oauth",
    "underscore": "^1.6.0",
    "q": "^1.0.1"
  },
  "readme": "# FantasySports [![Build Status](https://secure.travis-ci.org/jcreamer898/fantasy-sports.png?branch=master)](http://travis-ci.org/jcreamer898/fantasy-sports)\n\nThis is a node.js library for interacting with the Yahoo Fantasy API. It currently works with Express 3.0, and maybe 4.0, but haven't tried it in 4 yet as of 8/4/14.\n\nThe Yahoo API is an OAuth v1 API (gross), so I did my best to make it easy to use, but feel free to contribute any way to making it better!\n\n\n## Getting Started\nInstall the module with: `npm install fantasysports`\n\n### Configure\nFor my setup, I configure the API in the router with this...\n\n```js\nvar FantasySports = require('FantasySports');\nFantasySports.options({\n    \"accessTokenUrl\": \"https://api.login.yahoo.com/oauth/v2/get_request_token\",\n    \"requestTokenUrl\": \"https://api.login.yahoo.com/oauth/v2/get_token\",\n    \"oauthKey\": process.env.OAUTHKEY,\n    \"oauthSecret\": process.env.OAUTHSECRET,\n    \"version\": \"1.0\",\n    \"callback\": \"http://yourwebsite.com/auth/oauth/callback\",\n    \"encryption\": \"HMAC-SHA1\"\n};);\n```\n\nTo get an access token you'll have to set up 2 routes in your express app...\n\n```js\n// routes/index.js\n\n// app.get(\"/auth/oauth\")\nexports.oauth = function(req, res) {\n    FantasySports.startAuth(req, res);\n};\n\n// app.get(\"/auth/oauth/callback\")\nexports.authorize = function(req, res) {\n    FantasySports.endAuth(req, res);\n};\n```\n\nYou also need to make sure that you have session support setup in express.\n\nI'm currently using `cookieSession` in express 3.0.\n\n```js\napp.use(express.cookieSession({ \n    key: 'some key', \n    secret: 'some secret', \n    proxy: true \n}));\n```\n\nThen calling the API in a route is as easy as...\n\n```js\nexports.myTeams = function(req, res) {\n    FantasySports\n        .request(req, res)\n        .api('http://fantasysports.yahooapis.com/fantasy/v2/users;use_login=1/games;game_keys=nfl/leagues?format=json')\n        .done(function(data) {\n            var leagueData = data.fantasy_content.users[0].user[1].games[0].game[1].leagues,\n                leagues = [];\n\n            _.each(leagueData, function(value) {\n                if (value.league) leagues.push(value.league[0]);\n            });\n\n            res.json(leagues);\n        });\n};\n```\n\nThe data model for the Yahoo API is as weird as I've ever seen... hence stuff like `var leagueData = data.fantasy_content.users[0].user[1].games[0].game[1].leagues,`.\n\n## POST/PUT\nYou can pass an object full of data as a second parameter to the `.api` function for a `POST`\n\n** NOTE: You have to pass XML data in your posts, which is... weird**\n\n```js\nFantasySports\n    .request(req, res)\n    .api('http://fantasysports.yahooapis.com/fantasy/v2/league/LEAGUEID/transactions?format=json', '<?xml version=\"1.0\" encoding=\"UTF-8\" ?>' +\n'<fantasy_content>' +\n    '<transaction>' +\n        '<type>drop</type>' +\n        '<player>' +\n            '<player_key>331.p.24869</player_key>' +\n            '<transaction_data>' +\n                '<type>drop</type>' +\n                '<source_team_key>331.l.198983.t.2</source_team_key>' +\n            '</transaction_data>' +\n        '</player>' +\n    '</transaction>' +\n'</fantasy_content>')\n    .done(function(data) {\n        res.json(data);\n    }, function(err) {\n        res.json(err);\n    });\n```\n\nYou can also specify the type as well\n\n```js\nFantasySports\n    .request(req, res)\n    .api('http://fantasysports.yahooapis.com/fantasy/v2/league/LEAGUEID/transactions?format=json', 'PUT', XMLDATA\n    .done(function(data) {\n        res.json(data);\n    }, function(err) {\n        res.json(err);\n    });\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\nv0.2.0 8/3/2014\n\n## License\nCopyright (c) 2014 Jonathan Creamer  \nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "fantasysports@0.3.0",
  "_shasum": "089bb8e6d11c7dbf42033da483417e67258d9afb",
  "_from": "fantasysports@0.3.0",
  "_resolved": "https://registry.npmjs.org/fantasysports/-/fantasysports-0.3.0.tgz"
}
